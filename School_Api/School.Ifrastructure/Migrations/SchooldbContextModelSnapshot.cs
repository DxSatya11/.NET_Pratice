// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School_Ifrastructure.Data;

#nullable disable

namespace School_Ifrastructure.Migrations
{
    [DbContext(typeof(SchooldbContext))]
    partial class SchooldbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("School_Domain.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Department Name");

                    b.HasKey("Id");

                    b.ToTable("department");
                });

            modelBuilder.Entity("School_Domain.Model.Schools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "School Name");

                    b.HasKey("Id");

                    b.ToTable("schools");
                });

            modelBuilder.Entity("School_Domain.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Address");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "DOB");

                    b.Property<int?>("Dep_id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Department Id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Student Name");

                    b.Property<int?>("School_id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "School Id");

                    b.HasKey("Id");

                    b.HasIndex("Dep_id");

                    b.HasIndex("School_id");

                    b.ToTable("student");
                });

            modelBuilder.Entity("School_Domain.Model.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("Dep_id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Department Id");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("School_id")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "School Id");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Dep_id");

                    b.HasIndex("School_id");

                    b.ToTable("teacher");
                });

            modelBuilder.Entity("School_Domain.Model.Student", b =>
                {
                    b.HasOne("School_Domain.Model.Department", "Department")
                        .WithMany("Student")
                        .HasForeignKey("Dep_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("School_Domain.Model.Schools", "School")
                        .WithMany("Student")
                        .HasForeignKey("School_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("School");
                });

            modelBuilder.Entity("School_Domain.Model.Teacher", b =>
                {
                    b.HasOne("School_Domain.Model.Department", "Department")
                        .WithMany("Teacher")
                        .HasForeignKey("Dep_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("School_Domain.Model.Schools", "School")
                        .WithMany("Teacher")
                        .HasForeignKey("School_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("School");
                });

            modelBuilder.Entity("School_Domain.Model.Department", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("School_Domain.Model.Schools", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
